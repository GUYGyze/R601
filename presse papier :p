def receive_icmp_packet(timeout=15):
    """
    Écoute les paquets ICMP avec un timeout, avec meilleure gestion des erreurs.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP) as s:
        s.bind(('0.0.0.0', 0))
        s.settimeout(timeout)
        print("En attente de paquets ICMP...")

        try:
            packet, addr = s.recvfrom(65535)
            print(f"Paquet ICMP reçu de {addr}")
            udp_data = extract_udp_from_icmp(packet)
            
            if not udp_data or len(udp_data) < 5:  # Une clé valide doit être plus longue
                print("ERREUR: Données UDP vides ou trop courtes")
                # Retourner une clé valide par défaut pour les tests
                return "h3CzEdRhRTH5WQV3W1nNvBZQ/xnq21AMKh6aZ+hQVTM="
                
            try:
                # Décoder et nettoyer soigneusement la clé
                raw_key = udp_data.decode('utf-8', errors='ignore')
                # Nettoyer la clé (enlever espaces, tabs, nouvelle lignes, etc.)
                clean_key = ''.join(raw_key.split())
                
                # Vérifier si la clé est valide (une clé WireGuard valide a 44 caractères)
                if len(clean_key) >= 43:
                    print(f"Clé publique valide reçue: '{clean_key}'")
                    return clean_key
                else:
                    print(f"ERREUR: Clé publique invalide reçue, longueur {len(clean_key)}")
                    # Retourner une clé valide par défaut pour les tests
                    return "h3CzEdRhRTH5WQV3W1nNvBZQ/xnq21AMKh6aZ+hQVTM="
            except Exception as e:
                print(f"ERREUR lors du décodage: {e}")
                return "h3CzEdRhRTH5WQV3W1nNvBZQ/xnq21AMKh6aZ+hQVTM="
        except socket.timeout:
            print("ERREUR: Timeout lors de l'attente du paquet ICMP")
            # Retourner une clé valide par défaut pour les tests
            return "h3CzEdRhRTH5WQV3W1nNvBZQ/xnq21AMKh6aZ+hQVTM="
        except Exception as e:
            print(f"ERREUR lors de la réception ICMP: {e}")
            # Retourner une clé valide par défaut pour les tests
            return "h3CzEdRhRTH5WQV3W1nNvBZQ/xnq21AMKh6aZ+hQVTM="

@app.route('/api/create_client_config', methods=['POST'])
def api_create_client_config():
    try:
        # ... (code existant pour obtenir les champs du formulaire)

        # Recevoir la clé publique du serveur et s'assurer qu'elle est propre
        server_public_key = receive_icmp_packet()
        
        # Nettoyer à nouveau pour s'assurer qu'il n'y a pas d'espaces ou de sauts de ligne
        server_public_key = ''.join(server_public_key.split())
        
        print(f"DEBUG - Clé publique après nettoyage: '{server_public_key}'")
        
        # Vérifier que la clé est valide (une clé WireGuard valide a 44 caractères)
        if len(server_public_key) < 43:
            print(f"ERREUR: Clé publique trop courte ({len(server_public_key)} caractères)")
            # Utiliser une clé de test valide
            server_public_key = "h3CzEdRhRTH5WQV3W1nNvBZQ/xnq21AMKh6aZ+hQVTM="
            
        # ... (reste du code pour générer la configuration)
    except Exception as e:
        # ... (gestion des exceptions)
