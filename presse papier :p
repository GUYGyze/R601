@app.route('/api/start_tunnel', methods=['GET'])
def start_tunnel():
    server_ip = request.args.get('ip')
    if not server_ip:
        return jsonify({"success": False, "error": "IP du serveur manquante"}), 400
    
    try:
        # 1. Démarrer les threads de capture
        print(f"[+] Démarrage de la capture des handshakes ICMP pour le serveur {server_ip}")
        
        # Thread de réception ICMP
        receive_thread = threading.Thread(target=receive_icmp_handshake)
        receive_thread.daemon = True
        receive_thread.start()
        
        # Thread de capture et encapsulation des paquets UDP vers WireGuard
        capture_thread = threading.Thread(target=capture_and_encapsulate_handshake, 
                                         args=(51820, server_ip))
        capture_thread.daemon = True
        capture_thread.start()
        
        # 2. Attendre un peu pour s'assurer que les threads sont actifs
        time.sleep(1)
        
        # 3. Démarrer le tunnel WireGuard
        print(f"[+] Démarrage du tunnel WireGuard")
        subprocess.run(["wg-quick", "up", WG_INTERFACE], check=True)
        
        # 4. Démarrer la capture sur l'interface wg0
        wg0_thread = threading.Thread(target=capture_wg0_traffic, args=(server_ip,))
        wg0_thread.daemon = True
        wg0_thread.start()
        
        return jsonify({"success": True})
    except subprocess.CalledProcessError as e:
        return jsonify({"success": False, "error": str(e)}), 500
