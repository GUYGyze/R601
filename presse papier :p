def intercept_redirected_traffic(server_ip):
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
        s.bind(('127.0.0.1', 51821))
        print("[+] Interception des paquets UDP redirigés active sur port 51821")
        
        while True:
            try:
                data, addr = s.recvfrom(65535)
                print(f"[+] Trafic WireGuard intercepté, taille={len(data)}")
                # Encapsuler et envoyer en ICMP
                send_icmp_packet(server_ip, data)
            except Exception as e:
                print(f"[-] Erreur d'interception: {e}")

# Dans la fonction start_tunnel
intercept_thread = threading.Thread(target=intercept_redirected_traffic, args=(server_ip,))
intercept_thread.daemon = True
intercept_thread.start()

# Dans la fonction receive_icmp_handshake
while True:
    try:
        packet, addr = s.recvfrom(65535)
        src_ip = addr[0]
        print(f"[+] Paquet ICMP reçu de {src_ip}, taille={len(packet)}")
        
        payload = extract_udp_from_icmp(packet)
        print(f"[+] Payload extrait, taille={len(payload)}")
        
        # Essayer d'analyser
        if len(payload) >= 4:
            try:
                message_type = struct.unpack("!I", payload[:4])[0]
                print(f"[+] Message type détecté: {message_type}")
            except:
                print("[-] Impossible d'extraire le type de message")
        
        # Réinjecter dans WireGuard local
        send_wireguard_handshake(payload)
        print(f"[+] Payload réinjecté localement")
    except Exception as e:
        print(f"[-] Erreur réception ICMP: {e}")
