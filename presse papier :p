# Modifications à apporter à app_server.py

# 1. Améliorez la détection des handshakes (même fonction que pour le client)
def is_wireguard_handshake(packet):
    """
    Détecte tous les paquets WireGuard avec une logique plus souple.
    """
    try:
        if len(packet) < 4:
            return False

        # Les types de messages WireGuard (1 = Initiation, 2 = Response, 3 = Cookie, 4 = Transport)
        message_type = struct.unpack("!I", packet[:4])[0]
        
        # Afficher plus d'informations de diagnostic
        if message_type in [1, 2, 3, 4]:
            print(f"[+] Paquet WireGuard de type {message_type} détecté, taille: {len(packet)}")
            return True
        
        return False
    except Exception as e:
        print(f"[-] Erreur lors de la détection handshake : {e}")
        return False

# 2. Améliorer la fonction de capture (encapsulation plus agressive)
def capture_and_encapsulate_handshake(port=51820):
    """
    Capture et encapsule tous les paquets UDP du port WireGuard.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_UDP) as s:
        s.bind(('0.0.0.0', 0))
        print(f"[+] Surveillance des paquets WireGuard sur le port {port}")
        
        # Pour éviter les doublons
        recent_packets = {}
        
        # Map des clients (source IP -> destination IP)
        client_map = {}
        
        while True:
            try:
                packet, addr = s.recvfrom(65535)
                
                # Extraire les en-têtes IP et UDP
                ip_header_len = (packet[0] & 0x0F) * 4
                src_ip = socket.inet_ntoa(packet[12:16])
                dst_ip = socket.inet_ntoa(packet[16:20])
                
                # Ignorer localhost
                if src_ip == "127.0.0.1":
                    continue
                
                udp_header = packet[ip_header_len:ip_header_len+8]
                if len(udp_header) >= 4:
                    src_port, dest_port = struct.unpack('!HH', udp_header[:4])
                    
                    # Si c'est pour le port WireGuard
                    if dest_port == port:
                        # Extraire la charge utile
                        payload = packet[ip_header_len + 8:]
                        
                        if not payload:
                            continue
                            
                        # Eviter les doublons
                        packet_hash = hash(payload)
                        if packet_hash in recent_packets:
                            continue
                            
                        recent_packets[packet_hash] = True
                        if len(recent_packets) > 100:
                            oldest_key = next(iter(recent_packets))
                            del recent_packets[oldest_key]
                        
                        # Mémoriser le mapping client -> serveur
                        client_map[src_ip] = dst_ip
                        
                        # Encapsuler et envoyer à la source
                        # (on envoie à la source car c'est elle qui a initié la connexion)
                        print(f"[+] Encapsulation d'un paquet UDP vers {src_ip}")
                        encapsulate_wireguard_handshake(payload, src_ip)
            except Exception as e:
                print(f"[-] Erreur de capture UDP: {e}")
                continue

# 3. Améliorer la réception et réinjection ICMP
def receive_icmp_handshake():
    """
    Reçoit les paquets ICMP et réinjecte les payloads WireGuard.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP) as s:
        s.bind(('0.0.0.0', 0))
        print("[+] En attente de paquets ICMP WireGuard...")

        while True:
            try:
                packet, addr = s.recvfrom(65535)
                src_ip = addr[0]
                
                # Extraire le payload
                ip_header_length = 20
                icmp_header_length = 8
                payload = packet[ip_header_length + icmp_header_length:]
                
                if len(payload) < 4:
                    continue
                
                # Essayer d'identifier un paquet WireGuard
                try:
                    message_type = struct.unpack("!I", payload[:4])[0]
                    if message_type in [1, 2, 3, 4]:
                        print(f"[+] Paquet ICMP reçu de {src_ip} contenant WireGuard type {message_type}")
                        
                        # Réinjecter dans WireGuard local
                        send_wireguard_handshake(payload)
                        print(f"[+] Paquet réinjecté localement")
                except:
                    continue
            except Exception as e:
                print(f"[-] Erreur ICMP: {e}")
                continue

# 4. Modifier la route start_tunnel pour s'assurer que l'ordre est correct
@app.route('/api/start_tunnel', methods=['GET'])
def start_tunnel():
    client_ip = request.args.get('ip')
    if not client_ip:
        return jsonify({"success": False, "error": "IP du client manquante"}), 400
    
    try:
        # 1. Démarrer d'abord les threads de capture
        print(f"[+] Démarrage des captures ICMP pour {client_ip}")
        
        # Thread de réception ICMP
        receive_thread = threading.Thread(target=receive_icmp_handshake)
        receive_thread.daemon = True
        receive_thread.start()
        
        # Thread de capture et encapsulation
        capture_thread = threading.Thread(target=capture_and_encapsulate_handshake)
        capture_thread.daemon = True
        capture_thread.start()
        
        # 2. Attendre un peu pour s'assurer que les threads sont actifs
        time.sleep(1)
        
        # 3. Démarrer le tunnel WireGuard
        print(f"[+] Démarrage du tunnel WireGuard")
        subprocess.run(["wg-quick", "up", WG_INTERFACE], check=True)
        
        return jsonify({"success": True})
    except subprocess.CalledProcessError as e:
        return jsonify({"success": False, "error": str(e)}), 500
